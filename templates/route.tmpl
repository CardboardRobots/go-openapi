func Use{{ .Name }}(router *gin.Engine, service {{ .Name }}Service) {
    router.{{ .Verb }}("{{ .Path }}", func(ctx *gin.Context) {
        params:= {{ .Name }}Params{
            {{ range .Params }}
                {{ if eq .Type "int" }}
                    {{ .Name }}: GetInteger(ctx, "{{ .Key }}"),
                {{ else }}
                    {{ .Name }}: ctx.Param("{{ .Key }}"),
                {{ end }}
            {{ end }}
        }

        var query {{ .Name }}Query
        errQuery := ctx.ShouldBindQuery(&query)

        var body {{ .Name }}Body
        errBody := ctx.ShouldBind(&body)

        request := {{ .Name }}Request{
            params,
            query,
            body,
        }

        err := errQuery
        if err == nil {
            err = errBody
        }

        response := service.{{ .Name }}(ctx.Request.Context(), request, err)
        {{ range $key, $value := .Response }}
        if response.{{ $value.Type.Name }} != nil {
            ctx.IndentedJSON({{ .Code }}, response.{{ $value.Type.Name }})
            return
        }{{ end }}
        ctx.IndentedJSON(http.StatusInternalServerError, nil)
    })
}