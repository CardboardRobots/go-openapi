openapi: "3.1.0"
info:
  version: 1.0.0
  title: Auth Provider
  license:
    name: MIT
    identifier: ""
servers:
  - url: https://auth.jitter.dance
paths:
  /approve:
    post:
      operationId: approve
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApproveData"
      responses:
        307:
          description: Redirect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Redirect"
  /authorization:
    get:
      operationId: authorization
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: code_challenge
          in: query
          schema:
            type: string
        - name: code_challenge_method
          in: query
          schema:
            type: string
        - name: redirect_uri
          in: query
          schema:
            type: string
        - name: response_type
          required: true
          in: query
          schema:
            type: string
        - name: scope
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
      responses:
        307:
          description: Redirect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Redirect"
  /token:
    get:
      operationId: getToken
      parameters:
        - name: authorization
          in: header
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenData"
      responses:
        200:
          description: 'An Access Token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
  /users:
    get:
      summary: List all Users
      operationId: listUsers
      tags:
        - users
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: A paged array of Users
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a User
      operationId: createUser
      tags:
        - users
      parameters:
        - name: clientId
          in: header
          required: true
          schema:
            type: string
        - name: clientSecret
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserData"
      responses:
        201:
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}:
    get:
      summary: Info for a specific User
      operationId: getUser
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the User to retrieve
          schema:
            type: string
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Redirect:
      type: string
    ApproveData:
      type: object
      required:
        - requestId
        - approve
        - email
        - password
      properties:
        requestId:
          type: string
        approve:
          type: string
        email:
          type: string
        password:
          type: string
        scopes:
          type: string
    TokenData:
      type: object
      required:
        - grant_type
      properties:
        client_id:
          type: string
        client_secret:
          type: string
        grant_type:
          type: string
        scope:
          type: string
        code:
          type: string
        refresh_token:
          type: string
        username:
          type: string
        password:
          type: string
        redirect_uri:
          type: string
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: string
        refresh_token:
          type: string
        example_parameter:
          type: string
    User:
      type: object
      required:
        - email
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        roles:
          type: string
    CreateUserData:
      type: object
      required:
        - email
        - password
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        roles:
          type: string
          enum:
          - admin
          - super_admin
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string